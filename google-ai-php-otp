Google: php otp verification

Implementing OTP (One-Time Password) verification in PHP typically involves the following steps:

#   Generate OTP:

     -  Create a random, time-sensitive numeric or alphanumeric code (e.g., 6 digits) using PHP's rand() or random_int() functions. 

#   Store OTP:

     -  Store the generated OTP in a database along with the associated user's identifier (email or phone number) and a timestamp for expiration. This allows for verification and ensures the OTP's validity period. 

#   Send OTP:

     -  Send the generated OTP to the user via their registered email address using a PHP mailer library (e.g., PHPMailer) or to their mobile number via an SMS gateway API. 

#   User Input and Verification:

     -  Provide a form for the user to enter the received OTP.
     -  When the user submits the OTP, retrieve the stored OTP from the database using the user's identifier.
     -  Compare the user-provided OTP with the stored OTP.
     -  Check if the OTP has expired based on the stored timestamp. 

#   Handle Verification Outcome:

     -  If the OTP matches and is not expired, proceed with the desired action (e.g., user login, account activation, password reset).
     -  If the OTP is incorrect or expired, display an appropriate error message and potentially offer options like resending the OTP. 

Example (simplified, without full database interaction):

<?php

// Function to generate a 6-digit OTP
function generateOtp() {
    return str_pad(random_int(0, 999999), 6, '0', STR_PAD_LEFT);
}

// Function to send OTP (placeholder, replace with actual email/SMS sending logic)
function sendOtp($recipient, $otp) {
    // In a real application, you'd use PHPMailer or an SMS gateway API here.
    // For demonstration, let's just simulate sending.
    echo "OTP " . $otp . " sent to " . $recipient . "<br>";
    return true; // Simulate success
}

// --- Request OTP ---
if (isset($_POST['send_otp'])) {
    $email = $_POST['email'];
    $otp = generateOtp();

    // Store OTP in a session for this example (in a real app, use a database)
    session_start();
    $_SESSION['otp'] = $otp;
    $_SESSION['otp_email'] = $email;
    $_SESSION['otp_timestamp'] = time(); // Store timestamp for expiration

    if (sendOtp($email, $otp)) {
        echo "OTP sent successfully. Please check your email.<br>";
    } else {
        echo "Failed to send OTP.<br>";
    }
}

// --- Verify OTP ---
if (isset($_POST['verify_otp'])) {
    session_start();
    $enteredOtp = $_POST['entered_otp'];
    $storedOtp = $_SESSION['otp'] ?? null;
    $otpTimestamp = $_SESSION['otp_timestamp'] ?? 0;

    // OTP expiration (e.g., 5 minutes)
    $expirationTime = 300; // seconds

    if ($storedOtp && $enteredOtp == $storedOtp && (time() - $otpTimestamp) <= $expirationTime) {
        echo "OTP verified successfully!<br>";
        // Clear session data after successful verification
        unset($_SESSION['otp']);
        unset($_SESSION['otp_email']);
        unset($_SESSION['otp_timestamp']);
    } else {
        echo "Invalid or expired OTP. Please try again.<br>";
    }
}

?>

<form method="post">
    <h2>Send OTP</h2>
    Email: <input type="email" name="email" required><br>
    <button type="submit" name="send_otp">Send OTP</button>
</form>

<form method="post">
    <h2>Verify OTP</h2>
    Enter OTP: <input type="text" name="entered_otp" required><br>
    <button type="submit" name="verify_otp">Verify OTP</button>
</form>